# Recursive_AI_Framework
Truth-aligned recursive reasoning with guardrails, evidence tiers, and loop control.

> Build agents that “propose & test,” cite evidence, and avoid runaway recursion.

## Features
- **Recursion Guard**: checkpoints + loop limits with summaries and nudges.
- **Evidence Mode**: label claims by `{Scripture | Primary | Secondary | Heuristic}`.
- **Modes**: `Builder`, `Counselor`, `Researcher`, `Critic` (switchable at runtime).
- **Boundaries**: anti-coercion, zealotry filter, and mercy-first handler for distress.
- **Pipelines**: step functions with testable, composable stages.
- **Lightweight**: no heavy deps; drop-in for notebooks or services.

## Quickstart
```bash
pip install -e .
python examples/min_demo.py

# examples/min_demo.py
from raf.core import Reasoner, Evidence, RecursionGuard

guard = RecursionGuard(max_turns=3, checkpoint_on="contradiction")
r = Reasoner(
    modes=["Builder", "Researcher", "Critic"],
    guard=guard,
    zealoty_filter=True,
)

claim = r.ask(
    prompt="Summarize E8 ↔ Tree-of-Life mapping risks in 3 bullets.",
    evidence=Evidence(required_tiers=["Secondary", "Heuristic"]),
)

print("== ANSWER ==")
print(claim.text)
print("\n== EVIDENCE ==")
for item in claim.evidence:
    print(f"- [{item.tier}] {item.source}")
print("\n== GUARD LOG ==")
for e in r.guard.events: print(f"* {e.kind}: {e.note}")

